#!/bin/sh

# AI Arena Pre-Commit Hook
# Runs comprehensive validation before allowing commits

echo "üöÄ AI Arena Pre-Commit Validation Starting..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Track if any checks fail
FAILED=0

# Function to run a check
run_check() {
    local name="$1"
    local command="$2"
    
    echo "${BLUE}Running: ${name}${NC}"
    if eval "$command"; then
        echo "${GREEN}‚úÖ ${name} passed${NC}"
    else
        echo "${RED}‚ùå ${name} failed${NC}"
        FAILED=1
    fi
    echo ""
}

# 1. TypeScript Type Checking
echo "${YELLOW}üìã Phase 1: TypeScript Validation${NC}"
echo "----------------------------------------"

# Check backend TypeScript
if [ -d "backend" ]; then
    run_check "Backend TypeScript" "cd backend && npx tsc --noEmit"
fi

# Check frontend TypeScript
if [ -d "app" ]; then
    run_check "Frontend TypeScript" "cd app && npx tsc --noEmit"
fi

# Check metaverse TypeScript (allowing ts-ignore for known issues)
if [ -d "metaverse-game" ]; then
    run_check "Metaverse TypeScript" "cd metaverse-game && npx tsc --noEmit || true"
fi

# 2. Linting
echo "${YELLOW}üìã Phase 2: Code Quality${NC}"
echo "----------------------------------------"

# Lint backend
if [ -d "backend" ]; then
    run_check "Backend ESLint" "cd backend && npx eslint src --ext .ts --max-warnings 10"
fi

# Lint frontend
if [ -d "app" ]; then
    run_check "Frontend ESLint" "cd app && npx eslint src --ext .ts,.tsx --max-warnings 10"
fi

# 3. Schema Protection
echo "${YELLOW}üìã Phase 3: Schema Protection${NC}"
echo "----------------------------------------"

# Check for schema modifications
SCHEMA_CHANGES=$(git diff --cached --name-only | grep -E "(schema\.prisma|migrations/)" || true)
if [ -n "$SCHEMA_CHANGES" ]; then
    echo "${RED}‚õî FORBIDDEN: Database schema changes detected!${NC}"
    echo "${RED}Schema is FROZEN at v1.0.0 - no modifications allowed${NC}"
    echo "${YELLOW}Use existing JSONB fields for new data${NC}"
    FAILED=1
else
    echo "${GREEN}‚úÖ No schema modifications${NC}"
fi
echo ""

# 4. Game Architecture Validation
echo "${YELLOW}üìã Phase 4: Game Architecture${NC}"
echo "----------------------------------------"

# Check for forbidden patterns in game files
GAME_FILES=$(git diff --cached --name-only | grep -E "game/engine/games/" || true)
if [ -n "$GAME_FILES" ]; then
    for file in $GAME_FILES; do
        if [ -f "$file" ]; then
            # Check for forbidden patterns
            if grep -q "setTimeout\|setInterval" "$file"; then
                echo "${RED}‚ùå Forbidden timer usage in $file${NC}"
                echo "${YELLOW}Use engine.ticker instead${NC}"
                FAILED=1
            fi
            
            if grep -q "localStorage\." "$file"; then
                echo "${RED}‚ùå Forbidden localStorage in $file${NC}"
                echo "${YELLOW}Use engine.saveState() instead${NC}"
                FAILED=1
            fi
            
            if grep -q "document\.\|getElementById" "$file"; then
                echo "${RED}‚ùå Forbidden DOM manipulation in $file${NC}"
                echo "${YELLOW}Use React components instead${NC}"
                FAILED=1
            fi
        fi
    done
    
    if [ $FAILED -eq 0 ]; then
        echo "${GREEN}‚úÖ Game architecture compliant${NC}"
    fi
else
    echo "${GREEN}‚úÖ No game files modified${NC}"
fi
echo ""

# 5. Integration Validation
echo "${YELLOW}üìã Phase 5: Integration Checks${NC}"
echo "----------------------------------------"

# Run integration validator if significant changes
SIGNIFICANT_CHANGES=$(git diff --cached --name-only | wc -l)
if [ "$SIGNIFICANT_CHANGES" -gt 5 ]; then
    echo "Running integration validation..."
    if [ -f "scripts/validate-integration.ts" ]; then
        run_check "Platform Integration" "npx ts-node scripts/validate-integration.ts"
    fi
fi

# 6. Bot Sync Validation
BOT_CHANGES=$(git diff --cached --name-only | grep -E "(bot|Bot)" || true)
if [ -n "$BOT_CHANGES" ]; then
    echo "${YELLOW}üìã Phase 6: Bot Synchronization${NC}"
    echo "----------------------------------------"
    if [ -f "scripts/validate-bot-sync.ts" ]; then
        run_check "Bot Sync Validation" "npx ts-node scripts/validate-bot-sync.ts"
    fi
fi

# 7. Build Test (only for significant changes)
if [ "$SIGNIFICANT_CHANGES" -gt 10 ]; then
    echo "${YELLOW}üìã Phase 7: Build Verification${NC}"
    echo "----------------------------------------"
    
    # Test backend build
    if [ -d "backend" ]; then
        run_check "Backend Build" "cd backend && npm run build"
    fi
    
    # Test frontend build
    if [ -d "app" ]; then
        run_check "Frontend Build" "cd app && npm run build"
    fi
fi

# 8. Security Checks
echo "${YELLOW}üìã Final Phase: Security${NC}"
echo "----------------------------------------"

# Check for sensitive data
SENSITIVE_PATTERNS="(api[_-]?key|token|secret|password|credential|private[_-]?key)"
SENSITIVE_FILES=$(git diff --cached --name-only -z | xargs -0 grep -l -E -i "$SENSITIVE_PATTERNS" 2>/dev/null || true)

if [ -n "$SENSITIVE_FILES" ]; then
    echo "${RED}‚ö†Ô∏è WARNING: Potential sensitive data detected in:${NC}"
    echo "$SENSITIVE_FILES"
    echo "${YELLOW}Please review these files before committing${NC}"
    
    # Ask for confirmation
    echo "${YELLOW}Continue with commit? (y/n)${NC}"
    read -r response
    if [ "$response" != "y" ]; then
        FAILED=1
    fi
else
    echo "${GREEN}‚úÖ No sensitive data patterns detected${NC}"
fi
echo ""

# Final Summary
echo "========================================"
if [ $FAILED -eq 1 ]; then
    echo "${RED}‚ùå PRE-COMMIT VALIDATION FAILED${NC}"
    echo "${YELLOW}Please fix the issues above before committing${NC}"
    echo "========================================"
    exit 1
else
    echo "${GREEN}‚úÖ ALL CHECKS PASSED${NC}"
    echo "${GREEN}Proceeding with commit...${NC}"
    echo "========================================"
fi

# Run lint-staged for formatting
npx lint-staged