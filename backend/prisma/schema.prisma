// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(cuid())
  address         String           @unique
  username        String?          @unique
  role            UserRole         @default(USER)
  kycTier         Int              @default(0)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  bots            Bot[]
  deployments     DeploymentTransaction[]
  comments        Comment[]
  likes           Like[]
  followers       Follow[]         @relation("follower")
  following       Follow[]         @relation("following")
  achievements    UserAchievement[]
  sessions        Session[]
  
  @@index([address])
}

model Session {
  id              String           @id @default(cuid())
  userId          String
  user            User             @relation(fields: [userId], references: [id])
  token           String           @unique
  expiresAt       DateTime
  createdAt       DateTime         @default(now())
  
  @@index([userId])
  @@index([token])
}

model Bot {
  id              String           @id @default(cuid())
  name            String
  avatar          String           // preset avatar identifier
  prompt          String           @db.VarChar(1000) // 1000 char strategy
  isDemo          Boolean          @default(false) // System demo bots
  modelType       AIModel          // gpt-4o, claude-3-5-sonnet, etc.
  creatorId       String
  creator         User             @relation(fields: [creatorId], references: [id])
  isActive        Boolean          @default(true)
  stats           Json             @default("{}") // wins, losses, earnings
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  deploymentTx    DeploymentTransaction?
  queueEntries    QueueEntry[]
  tournaments     TournamentParticipant[]
  matches         MatchParticipant[]
  comments        Comment[]
  likes           Like[]
  
  @@index([creatorId])
  @@index([createdAt])
  @@index([isActive])
}

model DeploymentTransaction {
  id              String           @id @default(cuid())
  botId           String           @unique
  bot             Bot              @relation(fields: [botId], references: [id])
  userId          String
  user            User             @relation(fields: [userId], references: [id])
  txHash          String           @unique
  amount          Decimal          @db.Decimal(78, 18) // deployment fee in ETH
  status          TxStatus         @default(PENDING)
  createdAt       DateTime         @default(now())
  
  @@index([userId])
  @@index([txHash])
  @@index([status])
}

model QueueEntry {
  id              String           @id @default(cuid())
  botId           String
  bot             Bot              @relation(fields: [botId], references: [id])
  queueType       QueueType        @default(STANDARD)
  priority        Int              @default(0) // higher = faster matching
  status          QueueStatus      @default(WAITING)
  enteredAt       DateTime         @default(now())
  expiresAt       DateTime         // 24 hours from entry
  matchedAt       DateTime?
  
  @@index([botId])
  @@index([status])
  @@index([queueType])
  @@index([priority])
}

model Match {
  id              String           @id @default(cuid())
  type            MatchType        @default(TOURNAMENT)
  status          MatchStatus      @default(SCHEDULED)
  gameHistory     Json             // complete poker game state
  decisions       Json             // all AI decisions made
  result          Json?            // final rankings and points
  replayUrl       String?          // S3/R2 URL for replay file
  createdAt       DateTime         @default(now())
  startedAt       DateTime?
  completedAt     DateTime?
  
  participants    MatchParticipant[]
  aiDecisions     AIDecision[]
  tournament      Tournament?      @relation(fields: [tournamentId], references: [id])
  tournamentId    String?
  
  @@index([status])
  @@index([type])
  @@index([createdAt])
}

model MatchParticipant {
  id              String           @id @default(cuid())
  matchId         String
  match           Match            @relation(fields: [matchId], references: [id])
  botId           String
  bot             Bot              @relation(fields: [botId], references: [id])
  position        Int              // seat position
  finalRank       Int?             // 1st, 2nd, etc.
  points          Int              @default(0)
  
  @@unique([matchId, botId])
  @@index([matchId])
  @@index([botId])
}

model AIDecision {
  id              String           @id @default(cuid())
  matchId         String
  match           Match            @relation(fields: [matchId], references: [id])
  botId           String
  handNumber      Int
  decision        Json             // action, reasoning, timing
  gameState       Json             // game state at decision time
  timestamp       DateTime         @default(now())
  
  @@index([matchId])
  @@index([botId])
}

model Tournament {
  id              String           @id @default(cuid())
  name            String
  type            TournamentType
  status          TournamentStatus @default(UPCOMING)
  entryFee        Decimal          @db.Decimal(78, 18)
  prizePool       Decimal          @db.Decimal(78, 18)
  startTime       DateTime
  endTime         DateTime
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  participants    TournamentParticipant[]
  matches         Match[]
  
  @@index([type])
  @@index([status])
  @@index([startTime])
}

model TournamentParticipant {
  id              String           @id @default(cuid())
  tournamentId    String
  tournament      Tournament       @relation(fields: [tournamentId], references: [id])
  botId           String
  bot             Bot              @relation(fields: [botId], references: [id])
  score           Float            @default(0)
  rank            Int?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  @@unique([tournamentId, botId])
  @@index([tournamentId])
  @@index([botId])
}

model Comment {
  id              String           @id @default(cuid())
  content         String
  userId          String
  user            User             @relation(fields: [userId], references: [id])
  botId           String
  bot             Bot              @relation(fields: [botId], references: [id])
  createdAt       DateTime         @default(now())
  
  @@index([botId])
  @@index([userId])
}

model Like {
  id              String           @id @default(cuid())
  userId          String
  user            User             @relation(fields: [userId], references: [id])
  botId           String
  bot             Bot              @relation(fields: [botId], references: [id])
  createdAt       DateTime         @default(now())
  
  @@unique([userId, botId])
  @@index([botId])
  @@index([userId])
}

model Follow {
  id              String           @id @default(cuid())
  followerAddress String
  follower        User             @relation("follower", fields: [followerAddress], references: [address])
  followingAddress String
  following       User             @relation("following", fields: [followingAddress], references: [address])
  createdAt       DateTime         @default(now())
  
  @@unique([followerAddress, followingAddress])
  @@index([followerAddress])
  @@index([followingAddress])
}

model Achievement {
  id              String           @id @default(cuid())
  name            String           @unique
  description     String
  imageUrl        String?
  rarity          AchievementRarity
  createdAt       DateTime         @default(now())
  
  users           UserAchievement[]
}

model UserAchievement {
  id              String           @id @default(cuid())
  userId          String
  user            User             @relation(fields: [userId], references: [id])
  achievementId   String
  achievement     Achievement      @relation(fields: [achievementId], references: [id])
  unlockedAt      DateTime         @default(now())
  
  @@unique([userId, achievementId])
  @@index([userId])
}

enum UserRole {
  USER
  DEVELOPER
  ADMIN
}

enum AIModel {
  GPT_4O
  CLAUDE_3_5_SONNET
  CLAUDE_3_OPUS
  DEEPSEEK_CHAT
}

enum TxStatus {
  PENDING
  CONFIRMED
  FAILED
  REFUNDED
}

enum QueueType {
  STANDARD
  PRIORITY
  PREMIUM
}

enum QueueStatus {
  WAITING
  MATCHED
  EXPIRED
  CANCELLED
}

enum MatchType {
  TOURNAMENT
  HEAD_TO_HEAD
  PRACTICE
}

enum MatchStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  ABANDONED
}

enum TournamentType {
  ROOKIE
  PRO
  CHAMPIONSHIP
}

enum TournamentStatus {
  UPCOMING
  LIVE
  COMPLETED
}

enum AchievementRarity {
  COMMON
  RARE
  EPIC
  LEGENDARY
}