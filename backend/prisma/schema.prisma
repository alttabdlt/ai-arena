generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String                  @id @default(cuid())
  address      String                  @unique
  username     String?                 @unique
  role         UserRole                @default(USER)
  kycTier      Int                     @default(0)
  createdAt    DateTime                @default(now())
  updatedAt    DateTime                @updatedAt
  bots         Bot[]
  comments     Comment[]
  deployments  DeploymentTransaction[]
  followers    Follow[]                @relation("follower")
  following    Follow[]                @relation("following")
  likes        Like[]
  sessions     Session[]
  achievements UserAchievement[]
  stakedIDLE   StakedIDLE[]
  xpBalance    XPBalance?

  @@index([address])
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([token])
}

model Bot {
  id              String                  @id @default(cuid())
  tokenId         Int                     @unique
  name            String
  avatar          String
  prompt          String                  @db.VarChar(1000)
  personality     BotPersonality          @default(WORKER)
  isDemo          Boolean                 @default(false)
  modelType       AIModel?
  creatorId       String
  isActive        Boolean                 @default(true)
  stats           Json                    @default("{}")
  character       String?
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @updatedAt
  creator         User                    @relation(fields: [creatorId], references: [id])
  activityLogs    BotActivityLog[]
  activityScore   BotActivityScore?
  energy          BotEnergy?
  equipment       BotEquipment[]
  experience      BotExperience?
  house           BotHouse?
  comments        Comment[]
  deploymentTx    DeploymentTransaction?
  energyPurchases EnergyPurchase[]
  idleProgress    IdleProgress?
  likes           Like[]
  lootboxRewards  LootboxReward[]
  matches         MatchParticipant[]
  queueEntries    QueueEntry[]
  tournaments     TournamentParticipant[]
  bets            BettingEntry[]

  @@index([creatorId])
  @@index([createdAt])
  @@index([isActive])
  @@index([tokenId])
}

model DeploymentTransaction {
  id        String   @id @default(cuid())
  botId     String   @unique
  userId    String
  txHash    String   @unique
  amount    Decimal  @db.Decimal(78, 18)
  status    TxStatus @default(PENDING)
  createdAt DateTime @default(now())
  bot       Bot      @relation(fields: [botId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([txHash])
  @@index([status])
}

model QueueEntry {
  id           String      @id @default(cuid())
  botId        String
  queueType    QueueType   @default(STANDARD)
  priority     Int         @default(0)
  status       QueueStatus @default(WAITING)
  enteredAt    DateTime    @default(now())
  expiresAt    DateTime
  matchedAt    DateTime?
  tournamentId String?
  bot          Bot         @relation(fields: [botId], references: [id], onDelete: Cascade)
  tournament   Tournament? @relation(fields: [tournamentId], references: [id])

  @@index([botId])
  @@index([status])
  @@index([queueType])
  @@index([priority])
  @@index([tournamentId])
}

model Match {
  id             String             @id @default(cuid())
  type           MatchType          @default(TOURNAMENT)
  status         MatchStatus        @default(SCHEDULED)
  gameHistory    Json
  decisions      Json
  result         Json?
  replayUrl      String?
  createdAt      DateTime           @default(now())
  startedAt      DateTime?
  completedAt    DateTime?
  tournamentId   String?
  aiDecisions    AIDecision[]
  lootboxRewards LootboxReward[]
  tournament     Tournament?        @relation(fields: [tournamentId], references: [id])
  participants   MatchParticipant[]

  @@index([status])
  @@index([type])
  @@index([createdAt])
}

model MatchParticipant {
  id        String @id @default(cuid())
  matchId   String
  botId     String
  position  Int
  finalRank Int?
  points    Int    @default(0)
  bot       Bot    @relation(fields: [botId], references: [id])
  match     Match  @relation(fields: [matchId], references: [id])

  @@unique([matchId, botId])
  @@index([matchId])
  @@index([botId])
}

model AIDecision {
  id         String   @id @default(cuid())
  matchId    String
  botId      String
  handNumber Int
  decision   Json
  gameState  Json
  timestamp  DateTime @default(now())
  match      Match    @relation(fields: [matchId], references: [id])

  @@index([matchId])
  @@index([botId])
}

model Tournament {
  id           String                  @id @default(cuid())
  name         String
  type         TournamentType
  status       TournamentStatus        @default(UPCOMING)
  entryFee     Decimal                 @db.Decimal(78, 18)
  prizePool    Decimal                 @db.Decimal(78, 18)
  startTime    DateTime
  endTime      DateTime
  createdAt    DateTime                @default(now())
  updatedAt    DateTime                @updatedAt
  matches      Match[]
  queueEntries QueueEntry[]
  participants TournamentParticipant[]

  @@index([type])
  @@index([status])
  @@index([startTime])
}

model TournamentParticipant {
  id           String     @id @default(cuid())
  tournamentId String
  botId        String
  score        Float      @default(0)
  rank         Int?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  bot          Bot        @relation(fields: [botId], references: [id])
  tournament   Tournament @relation(fields: [tournamentId], references: [id])

  @@unique([tournamentId, botId])
  @@index([tournamentId])
  @@index([botId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  userId    String
  botId     String
  createdAt DateTime @default(now())
  bot       Bot      @relation(fields: [botId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@index([botId])
  @@index([userId])
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  botId     String
  createdAt DateTime @default(now())
  bot       Bot      @relation(fields: [botId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, botId])
  @@index([botId])
  @@index([userId])
}

model Follow {
  id               String   @id @default(cuid())
  followerAddress  String
  followingAddress String
  createdAt        DateTime @default(now())
  follower         User     @relation("follower", fields: [followerAddress], references: [address])
  following        User     @relation("following", fields: [followingAddress], references: [address])

  @@unique([followerAddress, followingAddress])
  @@index([followerAddress])
  @@index([followingAddress])
}

model Achievement {
  id          String            @id @default(cuid())
  name        String            @unique
  description String
  imageUrl    String?
  rarity      AchievementRarity
  createdAt   DateTime          @default(now())
  users       UserAchievement[]
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime    @default(now())
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  user          User        @relation(fields: [userId], references: [id])

  @@unique([userId, achievementId])
  @@index([userId])
}

model BotEquipment {
  id            String        @id @default(cuid())
  botId         String
  name          String
  equipmentType EquipmentType
  rarity        ItemRarity
  powerBonus    Int           @default(0)
  defenseBonus  Int           @default(0)
  equipped      Boolean       @default(false)
  consumable    Boolean       @default(false)
  quantity      Int           @default(1)
  uses          Int?
  maxUses       Int?
  speedBonus    Int           @default(0)
  agilityBonus  Int           @default(0)
  rangeBonus    Int           @default(0)
  healingPower  Int           @default(0)
  duration      Int?
  metadata      Json          @default("{}")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  bot           Bot           @relation(fields: [botId], references: [id], onDelete: Cascade)

  @@index([botId])
  @@index([equipped])
  @@index([consumable])
}

model BotHouse {
  id              String      @id @default(cuid())
  botId           String      @unique
  houseScore      Int         @default(100)
  defenseLevel    Int         @default(1)
  lastRobbed      DateTime?
  robberyCooldown DateTime?
  worldPosition   Json        @default("{\"x\": 0, \"y\": 0}")
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  bot             Bot         @relation(fields: [botId], references: [id], onDelete: Cascade)
  furniture       Furniture[]

  @@index([botId])
}

model Furniture {
  id            String        @id @default(cuid())
  houseId       String
  name          String
  furnitureType FurnitureType
  rarity        ItemRarity
  scoreBonus    Int           @default(0)
  defenseBonus  Int           @default(0)
  position      Json          @default("{\"x\": 0, \"y\": 0, \"rotation\": 0}")
  metadata      Json          @default("{}")
  createdAt     DateTime      @default(now())
  house         BotHouse      @relation(fields: [houseId], references: [id], onDelete: Cascade)

  @@index([houseId])
}

model BotActivityScore {
  id                  String   @id @default(cuid())
  botId               String   @unique
  matchesPlayed       Int      @default(0)
  lootboxesOpened     Int      @default(0)
  activitiesCompleted Int      @default(0)
  lastActive          DateTime @default(now())
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  bot                 Bot      @relation(fields: [botId], references: [id], onDelete: Cascade)

  @@index([botId])
}

model BotExperience {
  id              String   @id @default(cuid())
  botId           String   @unique
  level           Int      @default(1)
  currentXP       Int      @default(0)
  totalXP         Int      @default(0)
  xpToNextLevel   Int      @default(100)
  combatXP        Int      @default(0)
  socialXP        Int      @default(0)
  criminalXP      Int      @default(0)
  gamblingXP      Int      @default(0)
  tradingXP       Int      @default(0)
  prestigeLevel   Int      @default(0)
  prestigeTokens  Int      @default(0)
  skillPoints     Int      @default(0)
  allocatedSkills Json     @default("{}")
  bettingWins     Int      @default(0)
  bettingLosses   Int      @default(0)
  winStreak       Int      @default(0)
  bestWinStreak   Int      @default(0)
  totalBetXP      Int      @default(0)
  totalWonXP      Int      @default(0)
  lastXPGain      DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  bot             Bot      @relation(fields: [botId], references: [id], onDelete: Cascade)

  @@index([botId])
  @@index([level])
  @@index([totalXP])
}

model LootboxReward {
  id               String     @id @default(cuid())
  matchId          String
  botId            String
  lootboxRarity    ItemRarity
  equipmentRewards Json       @default("[]")
  furnitureRewards Json       @default("[]")
  currencyReward   Int        @default(0)
  opened           Boolean    @default(false)
  openedAt         DateTime?
  createdAt        DateTime   @default(now())
  bot              Bot        @relation(fields: [botId], references: [id], onDelete: Cascade)
  match            Match      @relation(fields: [matchId], references: [id], onDelete: Cascade)

  @@index([botId])
  @@index([matchId])
}

model BotEnergy {
  id            String   @id @default(cuid())
  botId         String   @unique
  currentEnergy Int      @default(100)
  maxEnergy     Int      @default(100)
  lastRegenTime DateTime @default(now())
  regenRate     Int      @default(1)
  walkCost      Int      @default(1)
  combatCost    Int      @default(10)
  robberyCost   Int      @default(5)
  activityCost  Int      @default(3)
  isPaused      Boolean  @default(false)
  autoResumeAt  Int?
  totalConsumed Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  bot           Bot      @relation(fields: [botId], references: [id], onDelete: Cascade)

  @@index([botId])
}

model EnergyPurchase {
  id           String   @id @default(cuid())
  botId        String
  energyAmount Int
  hypeSpent    Float
  packType     String
  txHash       String?
  purchasedAt  DateTime @default(now())
  bot          Bot      @relation(fields: [botId], references: [id], onDelete: Cascade)

  @@index([botId])
  @@index([purchasedAt])
}

model BotActivityLog {
  id          String         @id @default(cuid())
  botId       String
  activity    String
  emoji       String
  personality BotPersonality
  xpGained    Int            @default(0)
  timestamp   DateTime       @default(now())
  bot         Bot            @relation(fields: [botId], references: [id], onDelete: Cascade)

  @@index([botId, timestamp])
  @@index([personality])
}

model IdleProgress {
  id             String   @id @default(cuid())
  botId          String   @unique
  lastActiveAt   DateTime @default(now())
  lastXPClaim    DateTime @default(now())
  idleMultiplier Float    @default(1.0)
  totalIdleTime  Int      @default(0)
  totalIdleXP    Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  bot            Bot      @relation(fields: [botId], references: [id], onDelete: Cascade)

  @@index([botId])
  @@index([lastActiveAt])
}

model GlobalJackpot {
  id               String           @id @default(cuid())
  currentAmount    Int              @default(0)
  contributions    Int              @default(0)
  lastContribution DateTime         @default(now())
  contributionRate Float            @default(0.01)
  winChance        Float            @default(0.001)
  minAmount        Int              @default(1000)
  totalWon         Int              @default(0)
  totalWinners     Int              @default(0)
  biggestWin       Int              @default(0)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  history          JackpotHistory[]
}

model JackpotHistory {
  id            String         @id @default(cuid())
  botId         String
  botName       String
  personality   BotPersonality
  amount        Int
  winChance     Float
  contributions Int
  jackpotId     String
  wonAt         DateTime       @default(now())
  jackpot       GlobalJackpot  @relation(fields: [jackpotId], references: [id])

  @@index([botId])
  @@index([wonAt])
  @@index([amount])
}

enum UserRole {
  USER
  DEVELOPER
  ADMIN
}

enum AIModel {
  GPT_4O
  GPT_4O_MINI
  GPT_3_5_TURBO
  O3
  O3_MINI
  O3_PRO
  CLAUDE_3_5_SONNET
  CLAUDE_3_5_HAIKU
  CLAUDE_3_HAIKU
  CLAUDE_3_OPUS
  CLAUDE_4_OPUS
  CLAUDE_4_SONNET
  DEEPSEEK_CHAT
  DEEPSEEK_CODER
  DEEPSEEK_R1
  DEEPSEEK_V3
  QWEN_2_5_72B
  QWQ_32B
  QVQ_72B_PREVIEW
  QWEN_2_5_MAX
  GROK_3
  KIMI_K2
  GEMINI_2_5_PRO
  GEMINI_2_5_PRO_DEEP_THINK
  LLAMA_3_1_405B
  LLAMA_3_1_70B
  LLAMA_3_2_90B
  MIXTRAL_8X22B
}

enum TxStatus {
  PENDING
  CONFIRMED
  FAILED
  REFUNDED
}

enum QueueType {
  STANDARD
  PRIORITY
  PREMIUM
}

enum QueueStatus {
  WAITING
  MATCHED
  EXPIRED
  CANCELLED
}

enum MatchType {
  TOURNAMENT
  HEAD_TO_HEAD
  PRACTICE
}

enum MatchStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  ABANDONED
}

enum TournamentType {
  ROOKIE
  PRO
  CHAMPIONSHIP
}

enum TournamentStatus {
  UPCOMING
  LIVE
  COMPLETED
}

enum AchievementRarity {
  COMMON
  RARE
  EPIC
  LEGENDARY
}

enum EquipmentType {
  SWORD
  ARMOR
  TOOL
  ACCESSORY
  POTION
  BOOTS
  GUN
}

enum ItemRarity {
  COMMON
  UNCOMMON
  RARE
  EPIC
  LEGENDARY
  GOD_TIER
}

enum FurnitureType {
  DECORATION
  FUNCTIONAL
  DEFENSIVE
  TROPHY
}

enum BotPersonality {
  CRIMINAL
  GAMBLER
  WORKER
}

// ============================================
// Betting Tournament System (15-minute cycles)
// ============================================

model BettingTournament {
  id                  String              @id @default(cuid())
  startTime           DateTime
  gameType            BettingGameType
  status              BettingTournamentStatus @default(SCHEDULED)
  bettingDeadline     DateTime
  totalBettingPool    Int                 @default(0)
  housePoolContribution Int               @default(0)
  winnerId            String?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  
  participants        BettingParticipant[]
  bets                BettingEntry[]
  
  @@index([startTime])
  @@index([status])
}

model BettingParticipant {
  id                String          @id @default(cuid())
  tournamentId      String
  aiModel           String
  name              String
  initialOdds       Float
  currentOdds       Float
  totalBetsPlaced   Int             @default(0)
  placement         Int?
  score             Int?
  
  tournament        BettingTournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  bets              BettingEntry[]
  
  @@unique([tournamentId, aiModel])
  @@index([tournamentId])
}

model BettingEntry {
  id                String                  @id @default(cuid())
  botId             String                  // Bot that placed the bet
  tournamentId      String
  participantId     String
  amount            Int                     // XP amount bet
  potentialPayout   Float
  actualPayout      Int?                    // Null until tournament completes
  status            BetStatus               @default(PENDING)
  timestamp         DateTime                @default(now())
  
  bot               Bot                     @relation(fields: [botId], references: [id])
  tournament        BettingTournament       @relation(fields: [tournamentId], references: [id])
  participant       BettingParticipant      @relation(fields: [participantId], references: [id])
  
  @@index([botId])
  @@index([tournamentId])
  @@index([status])
}

model BettingPool {
  id                String          @id @default(cuid())
  tournamentId      String          @unique
  totalPool         Int             @default(0)
  houseCut          Int             @default(0)    // 5% house edge
  payoutPool        Int             @default(0)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  
  @@index([tournamentId])
}

model StakedIDLE {
  id                String          @id @default(cuid())
  userId            String
  amount            Int             // Amount of $IDLE staked
  xpGenerationRate  Int             // XP per hour
  stakingTier       StakingTier
  lockedUntil       DateTime        // 7-day minimum lock
  totalXPGenerated  Int             @default(0)
  lastClaimTime     DateTime        @default(now())
  isActive          Boolean         @default(true)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  
  user              User            @relation(fields: [userId], references: [id])
  
  @@index([userId])
  @@index([isActive])
}

model XPBalance {
  id                String          @id @default(cuid())
  userId            String          @unique
  currentXP         Int             @default(0)
  totalEarnedXP     Int             @default(0)
  totalSpentXP      Int             @default(0)
  monthlyDecay      Int             @default(0)    // 10% monthly decay
  lastDecayDate     DateTime        @default(now())
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  
  user              User            @relation(fields: [userId], references: [id])
}

enum BettingGameType {
  POKER
  CONNECT4
  REVERSE_HANGMAN
}

enum BettingTournamentStatus {
  SCHEDULED
  BETTING_OPEN
  BETTING_CLOSED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum BetStatus {
  PENDING
  WON
  LOST
  REFUNDED
}

enum StakingTier {
  BRONZE      // 10k XP/hour
  SILVER      // 15k XP/hour
  GOLD        // 20k XP/hour
  PLATINUM    // 25k XP/hour
  DIAMOND     // 30k XP/hour
}
