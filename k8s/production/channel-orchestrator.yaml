apiVersion: apps/v1
kind: Deployment
metadata:
  name: channel-orchestrator
  namespace: ai-arena
  labels:
    app: channel-orchestrator
    tier: backend
spec:
  replicas: 3 # High availability
  selector:
    matchLabels:
      app: channel-orchestrator
  template:
    metadata:
      labels:
        app: channel-orchestrator
        tier: backend
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - channel-orchestrator
              topologyKey: kubernetes.io/hostname
      containers:
      - name: orchestrator
        image: ai-arena/channel-orchestrator:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
        - containerPort: 9090
          name: metrics
        env:
        - name: NODE_ENV
          value: "production"
        - name: AWS_REGION
          value: "us-west-2"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: ai-arena-secrets
              key: database-url
        - name: REDIS_HOST
          value: "redis-cluster.ai-arena.svc.cluster.local"
        - name: REDIS_PORT
          value: "6379"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ai-arena-secrets
              key: redis-password
        - name: CONVEX_DEPLOY_KEY
          valueFrom:
            secretKeyRef:
              name: ai-arena-secrets
              key: convex-deploy-key
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: channel-orchestrator
  namespace: ai-arena
spec:
  selector:
    app: channel-orchestrator
  ports:
  - name: http
    port: 80
    targetPort: 8080
  - name: metrics
    port: 9090
    targetPort: 9090
  type: ClusterIP
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: channel-orchestrator-hpa
  namespace: ai-arena
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: channel-orchestrator
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: channel_load_percentage
      target:
        type: AverageValue
        averageValue: "0.7"
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Pods
        value: 2
        periodSeconds: 60
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Pods
        value: 1
        periodSeconds: 60
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: channel-orchestrator-pdb
  namespace: ai-arena
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: channel-orchestrator